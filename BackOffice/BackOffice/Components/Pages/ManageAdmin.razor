@page "/manageadmin"
@using BackOffice.Models
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject HttpClient Http
@inject IConfiguration Configuration



<h3 class="header-title">ManageAdmin</h3>


<section class="ManageAdmin">
    <div class="container">


        @if (!string.IsNullOrEmpty(@StatusMessage))
        {
            <div class="alert alert-danger" role="alert">
                @StatusMessage
            </div>
        }



        @if (userAdminForms != null)
        {
            @foreach (var userAdminForm in userAdminForms)
            {
                <div>
                    <h4>User: @userAdminForm.FirstName @userAdminForm.LastName</h4>
                    <EditForm Model="userAdminForm" OnValidSubmit="@(() => UpdateRoles(userAdminForm))" novalidate>
                        <InputText type="hidden" @bind-Value="userAdminForm.UserId" />
                        <div class="checkbox-group">
                            <div class="mb-3">
                                <label>User</label>
                                <InputCheckbox @bind-Value="userAdminForm.IsUser" />
                            </div>
                            <div class="mb-3">
                                <label>Admin</label>
                                <InputCheckbox @bind-Value="userAdminForm.IsAdmin" />
                            </div>
                            <div class="mb-3">
                                <label>Manager</label>
                                <InputCheckbox @bind-Value="userAdminForm.IsManager" />
                            </div>
                            <div class="mb-3">
                                <label>SuperAdmin</label>
                                <InputCheckbox @bind-Value="userAdminForm.IsSuperAdmin" />
                            </div>
                        </div>

                        <button type="submit" class="btn btn-theme-s">Update</button>
                    </EditForm>
                </div>
            }
        }
        else
        {
            <div><i class="fa-sharp fa-solid fa-spinner-third fa-spin"></i></div>
        }
    </div>
</section>


@code {
    // private IEnumerable<UsersWithRolesDisplay> users;

    private List<UserAdminForm> userAdminForms=null!;

    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var response = await Http.GetFromJsonAsync<IEnumerable<Models.UsersWithRoles>>("https://userprovider-silicon-gala.azurewebsites.net/api/GetUsersRoles?code=UGlx2XkX4mkFrUPEB97YHjVtUQTHMQxXbG9zP17dqY1OAzFuEVUHwQ%3D%3D");
            
           // var response = await Http.GetFromJsonAsync<IEnumerable<UsersWithRoles>>(Configuration.GetValue<string>("API:GetUsersRoles"));
            if (response != null)
            {
                userAdminForms = new List<UserAdminForm>();
                foreach (var roleAndUser in response)
                {
                    userAdminForms.Add(new UserAdminForm
                        {
                            FirstName = roleAndUser.FirstName,
                            LastName = roleAndUser.LastName,
                            UserId = roleAndUser.Id,
                            IsAdmin = roleAndUser.Roles!.Contains("Admin"),
                            IsUser = roleAndUser.Roles.Contains("User"),
                            IsSuperAdmin = roleAndUser.Roles.Contains("SuperAdmin"),
                            IsManager = roleAndUser.Roles.Contains("Manager")
                        });
                }
            }
            else
            {
                StatusMessage = "No users found";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"{ex.Message}";
        }
    }

    public async Task UpdateRoles(UserAdminForm userAdminForm)
    {

       var response = await Http.PostAsJsonAsync($"https://userprovider-silicon-gala.azurewebsites.net/api/UpdateUserRoles?code=D4jeiujFrsg-YMUM6cPVohMryRijkkI8YCJD8tC-JqnIAzFuDVkajg%3D%3D", userAdminForm);
       //var response = await Http.PostAsJsonAsync(Configuration.GetValue<string>("API:UpdateUsersRoles"), userAdminForm);
       
       if (response.IsSuccessStatusCode)
        {
            StatusMessage = "Roles updated";
            await OnInitializedAsync();
        }
        else
        {
            StatusMessage = "Roles not updated";
        }
    }
    

}