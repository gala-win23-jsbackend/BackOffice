@page "/UpdateUser/{id}"

@using BackOffice.Data

@attribute [StreamRendering]
@rendermode InteractiveServer

@layout BackOffice.Components.Layout.MainLayout
@inject HttpClient Http



<h3 class="header-title">UpdateUser</h3>

   @if (!string.IsNullOrEmpty(@StatusMessage))
{
    <div class="alert alert-danger" role="alert">
        @StatusMessage
    </div>
}


@if (userForm == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="userForm" OnValidSubmit="HandleSubmit" FormName="updateuser">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-floating mb-3">
            <InputText @bind-Value="userForm.FirstName" class="form-control" />
            <label for="FirstName" class="form-label">First Name</label>
            <ValidationMessage For="() => userForm.FirstName" class="text-danger" />
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="userForm.LastName" class="form-control" />
            <label for="LastName" class="form-label">Last Name</label>
            <ValidationMessage For="() => userForm.LastName" class="text-danger" />
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="userForm.PreferredEmail" class="form-control" />
            <label for="PreferredEmail" class="form-label">Preferred Email</label>
            <ValidationMessage For="() => userForm.PreferredEmail" class="text-danger" />
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="userForm.AddressType" class="form-control" />
            <label for="AddressType" class="form-label
                ">Address Type</label>
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="userForm.AddressLine_1" class="form-control" />
            <label for="AddressLine_1" class="form-label
                ">Address Line 1</label>
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="userForm.AddressLine_2" class="form-control" />
            <label for="AddressLine_2" class="form-label
                ">Address Line 2</label>
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="userForm.PostCode" class="form-control" />
            <label for="PostalCode" class="form-label
                ">Postal Code</label>
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="userForm.City" class="form-control" />
            <label for="City" class="form-label
                ">City</label>
        </div>
        <button type="submit" class="button btn-theme-s w-25">Update user</button>
    </EditForm>

}

@code {
    private string StatusMessage = null!;

    public UserId userId = new UserId();
    public class UserId
    {
        public string Id { get; set; } = null!;
    }


    [SupplyParameterFromForm]
    public UserForm userForm { get; set; } = new UserForm();

    [Parameter]
    public string id { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {

        if (id != null)
        {
            var user = await Http.GetFromJsonAsync<ApplicationUser>($"http://localhost:7093/api/GetOneUser/?id={id}");

          //  var user = await Http.GetFromJsonAsync<ApplicationUser>($"https://userprovider-silicon-gala.azurewebsites.net/api/GetOneUser?code=39i1jwWzU7erBYfIowctdFgC_sGX4SdEb0qbN_ZCTQnYAzFuLWQ-qw%3D%3D");
            if (user != null)
            {
                userForm = new UserForm
                    {
                        Id = user!.Id,
                        PreferredEmail = user.PreferredEmail,
                        AddressType = user.UserAddress!.AddressType,
                        AddressLine_1 = user.UserAddress.AddressLine_1,
                        AddressLine_2 = user.UserAddress.AddressLine_2,
                        PostCode = user.UserAddress.PostCode,
                        City = user.UserAddress.City,
                        FirstName = user.UserProfile!.FirstName,
                        LastName = user.UserProfile.LastName
                    };
            }
            else
            {
                StatusMessage = "Unable to update the user right now. Please try again later.";
            }
        }
    }

    private async Task HandleSubmit()
    {
             //   var response = await Http.PostAsJsonAsync("http://localhost:7093/api/UpdateUser", userForm);

        var response = await Http.PostAsJsonAsync("https://userprovider-silicon-gala.azurewebsites.net/api/UpdateUser?code=lTSU9ifbaSKPfVHoKOZxLVi7MB-zd3Bk4s25pYnKY6qFAzFuT5uzEg%3D%3D", userForm);
       // var response = await Http.PostAsJsonAsync(Configuration.GetValue<string>("API:Update_User"), userForm);
        
        if (response.IsSuccessStatusCode)
        {
            StatusMessage = "User updated successfully";
        }
    }

    public class UserForm
    {
        public string Id { get; set; } = null!;

        public string? PreferredEmail { get; set; }

        public string AddressType { get; set; } = null!;
        public string AddressLine_1 { get; set; } = null!;
        public string? AddressLine_2 { get; set; }

        public string PostCode { get; set; } = null!;
        public string City { get; set; } = null!;
        public string FirstName { get; set; } = null!;
        public string LastName { get; set; } = null!;

    }
}

