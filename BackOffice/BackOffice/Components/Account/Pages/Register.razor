@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BackOffice.Data
@inject HttpClient Http
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>



<secton class="register container">
    <h1 class="header-title">Register</h1>
    <div >
        @if (!string.IsNullOrEmpty(@StatusMessage))
        {
            <div class="alert alert-danger" role="alert">
                @StatusMessage
            </div>
        }
        
        <EditForm Model="SignUpForm" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="signupform">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="text" @bind-Value="SignUpForm.FirstName" class="form-control" autocomplete="givenname" aria-required="true" placeholder="First name" />
                <label for="password">First name</label>
                <ValidationMessage For="() => SignUpForm.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="text" @bind-Value="SignUpForm.LastName" class="form-control" autocomplete="surname" aria-required="true" placeholder="Last name" />
                <label for="password">Last name</label>
                <ValidationMessage For="() => SignUpForm.Password" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="SignUpForm.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => SignUpForm.Email" class="text-danger" />
            </div>
            
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="SignUpForm.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => SignUpForm.Password" class="text-danger" />
            </div>
            
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="SignUpForm.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => SignUpForm.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="button btn-theme">Register</button>
        </EditForm>
    </div>
</secton>

@code {
   

    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; } = null!;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    public SignUpFormModel SignUpForm { get; set; } = new();



    public class SignUpFormModel
    {
        [DataType(DataType.Text)]
        [Display(Name = "First Name", Prompt = "Enter your first name", Order = 0)]
        [Required(ErrorMessage = "First name is required")]
        [MinLength(2, ErrorMessage = "First name must be at least 2 points")]
        public string FirstName { get; set; } = null!;

        [DataType(DataType.Text)]
        [Display(Name = "Last Name", Prompt = "Enter your last name", Order = 1)]
        [Required(ErrorMessage = "Last name is required")]
        [MinLength(2, ErrorMessage = "Last name must be at least 2 characters long")]
        public string LastName { get; set; } = null!;

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }


    public async Task RegisterUser(EditContext editContext)
    {
        var user = new ApplicationUser
            {
                UserProfile = new UserProfile
                {
                    FirstName = SignUpForm.FirstName,
                    LastName = SignUpForm.LastName
                },
                UserName = SignUpForm.Email,
                Email = SignUpForm.Email,
                EmailConfirmed=true,
                
              
            };


       

            var alreadyExists = await UserManager.FindByEmailAsync(SignUpForm.Email);
            if (alreadyExists != null)
            {
                StatusMessage = "Email already exists";

                return;
            }

            var result = await UserManager.CreateAsync(user, SignUpForm.Password);
            var roleResult = await UserManager.AddToRoleAsync(user, "Manager");

            if (result.Succeeded)
            {
                if (!roleResult.Succeeded)
                {
                    StatusMessage = "Unable to register roles in account. Please try again.";
                    return;
                }


               
                NavigationManager.NavigateTo("Account/Login");


            }
            if (!result.Succeeded)
            {
                StatusMessage = "Unable to register account. Please try again.";
                return;
            }
      

    }
}